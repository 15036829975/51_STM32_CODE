C51 COMPILER V9.60.7.0   USER                                                              11/20/2023 18:28:30 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE USER
OBJECT MODULE PLACED IN .\Objects\user.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE user.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\user
                    -.lst) TABS(2) OBJECT(.\Objects\user.obj)

line level    source

   1          #include <reg52.h>           //调用单片机头文件
   2          #include "common.h"
   3          #include "ADC0832.h"
   4          #include "lcd1602.h"
   5          #include "uart.h"
   6          #include "DS18B20_One_1.h"
   7          #define uchar unsigned char   //宏定义"uchar"代替"unsigned char"。
   8          #define uint  unsigned int    //宏定义"uint"用来定义无符号整型数。
   9          #define false 0
  10          #define true 1
  11          
  12          //按键引脚定义
  13          sbit key1 = P1^0;
  14          sbit key2 = P1^1;
  15          sbit key3 = P1^2;
  16          
  17          sbit BEEP = P2^0;//蜂鸣器
  18          
  19          // these variables are volatile because they are used during the interrupt service routine!
  20          volatile unsigned int BPM;                   // used to hold the pulse rate
  21          volatile unsigned long Signal;                // holds the incoming raw data
  22          volatile unsigned int IBI = 600;             // holds the time between beats, must be seeded! 
  23          volatile bit Pulse = false;     // true when pulse wave is high, false when it's low
  24          volatile bit QS = false;        // becomes true when Arduoino finds a beat.
  25          volatile int rate[10];                    // array to hold last ten IBI values
  26          volatile unsigned long sampleCounter = 0;          // used to determine pulse timing
  27          volatile unsigned long lastBeatTime = 0;           // used to find IBI
  28          volatile int Peak =512;                      // used to find peak in pulse wave, seeded
  29          volatile int Trough = 512;                     // used to find trough in pulse wave, seeded
  30          volatile int thresh = 512;                // used to find instant moment of heart beat, seeded
  31          volatile int amp = 100;                   // used to hold amplitude of pulse waveform, seeded
  32          volatile bit firstBeat = true;        // used to seed rate array so we startup with reasonable BPM
  33          volatile bit secondBeat = false;      // used to seed rate array so we startup with reasonable BPM
  34          
  35          
  36          bit shuaxin=0;
  37          uchar heartrate = 0;
  38          uchar heartrateMax = 150,heartrateMin = 60;//心率上下限
  39          short temperature = 0;//体温值
  40          short temperatureMax = 380;//体温上限值
  41          
  42          unsigned char setn = 0;
  43          
  44          void Timer_Init(void) //定时器初始化，定时50ms  
  45          {
  46   1          TMOD |= 0x11;   //定时器0、定时器1工作方式1
  47   1          TL0 = 0xCD;   //2ms
  48   1          TH0 = 0xF8;
  49   1          TR0 = 1;
  50   1          EA= 1;
  51   1          ET0 = 1;
  52   1          TL1 = 0x00;   //20ms
  53   1          TH1 = 0xB8;
  54   1          TR1 = 1;
C51 COMPILER V9.60.7.0   USER                                                              11/20/2023 18:28:30 PAGE 2   

  55   1          ET1 = 1;
  56   1      }
  57          
  58          void display_set_value()//显示设置的上下限
  59          {
  60   1          if(setn == 1)//心率上下限显示
  61   1          {
  62   2              lcd_write_char(3,1,heartrateMin/100+'0');
  63   2              lcd_write_char(4,1,heartrateMin%100/10+'0');
  64   2              lcd_write_char(5,1,heartrateMin%10+'0');
  65   2            
  66   2              lcd_write_char(13,1,heartrateMax/100+'0');
  67   2              lcd_write_char(14,1,heartrateMax%100/10+'0');
  68   2              lcd_write_char(15,1,heartrateMax%10+'0');
  69   2            
  70   2              lcd_write_com(0x80+0x40+5);//心率下限位置
  71   2              lcd_write_com(0x0f);//光标闪烁
  72   2          }
  73   1          else if(setn == 2)//心率上下限显示
  74   1          {
  75   2              lcd_write_char(3,1,heartrateMin/100+'0');
  76   2              lcd_write_char(4,1,heartrateMin%100/10+'0');
  77   2              lcd_write_char(5,1,heartrateMin%10+'0');
  78   2            
  79   2              lcd_write_char(13,1,heartrateMax/100+'0');
  80   2              lcd_write_char(14,1,heartrateMax%100/10+'0');
  81   2              lcd_write_char(15,1,heartrateMax%10+'0');
  82   2            
  83   2              lcd_write_com(0x80+0x40+15);//心率上限位置
  84   2              lcd_write_com(0x0f);//光标闪烁
  85   2          }
  86   1          else if(setn == 3)//温度上限
  87   1          {
  88   2              lcd_write_char(6,1,temperatureMax/100+'0');
  89   2              lcd_write_char(7,1,temperatureMax%100/10+'0');
  90   2              lcd_write_char(9,1,temperatureMax%10+'0');
  91   2            
  92   2              lcd_write_com(0x80+0x40+9);//温度上限位置
  93   2              lcd_write_com(0x0f);//光标闪烁
  94   2          }
  95   1      }
  96          
  97          void keyscan()//按键扫描
  98          {
  99   1          if(key1 == 0)//加键按下
 100   1          {
 101   2              delay_ms(10);//消抖
 102   2              if(key1 == 0)
 103   2              {
 104   3                  while(key1 == 0);
 105   3                  setn++;
 106   3                  if(setn > 3)//按下次数超过3次，退出设置
 107   3                  {
 108   4                      setn = 0;
 109   4                      lcd_write_com(0x0C);
 110   4                      lcd_write_str(0, 0, "  Heartrate:000 ");
 111   4                      lcd_write_str(0, 1, "  Temp:00.0 C   ");
 112   4                      lcd_write_char(11,1,0xdf);
 113   4                  }
 114   3                  if(setn == 1)//显示设置心率
 115   3                  {
 116   4                      lcd_write_str(0, 0, "  SET THE HEART ");
C51 COMPILER V9.60.7.0   USER                                                              11/20/2023 18:28:30 PAGE 3   

 117   4                      lcd_write_str(0, 1, "XL:000    XH:000");
 118   4                  }
 119   3                  if(setn == 3)//显示设置温度
 120   3                  {
 121   4                      lcd_write_str(0, 0, "  SET THE TEMP  ");
 122   4                      lcd_write_str(0, 1, "      00.0 C    ");
 123   4                      lcd_write_char(10,1,0xdf);
 124   4                  }
 125   3                  display_set_value();
 126   3              }
 127   2          }
 128   1          if(key2 == 0)//加键按下
 129   1          {
 130   2              delay_ms(100);//消抖
 131   2              if(key2 == 0)
 132   2              {
 133   3                  if(setn == 1)
 134   3                  {
 135   4                      if(heartrateMax-heartrateMin>1)heartrateMin++;//上限必须大于下限，下限才能加
 136   4                      display_set_value();//显示
 137   4                  }
 138   3                  if(setn == 2)
 139   3                  {
 140   4                      if(heartrateMax<120)heartrateMax++;//心率上限最大到120
 141   4                      display_set_value();
 142   4                  }
 143   3                  if(setn == 3)
 144   3                  {
 145   4                      if(temperatureMax<999)temperatureMax++;//温度上限最大到999
 146   4                      display_set_value();
 147   4                  }
 148   3              }
 149   2          }
 150   1          if(key3 == 0)//减键按下
 151   1          {
 152   2              delay_ms(100);
 153   2              if(key3 == 0)
 154   2              {
 155   3                  if(setn == 1)
 156   3                  {
 157   4                      if(heartrateMin>0)heartrateMin--;//心率下限最小到0
 158   4                      display_set_value();//显示
 159   4                  }
 160   3                  if(setn == 2)
 161   3                  {
 162   4                      if(heartrateMax-heartrateMin>1)heartrateMax--;//上限必须大于下限，上限才能减
 163   4                      display_set_value();
 164   4                  }
 165   3                  if(setn == 3)
 166   3                  {
 167   4                      if(temperatureMax>0)temperatureMax--;//温度上限最小到0
 168   4                      display_set_value();//显示
 169   4                  }
 170   3              }
 171   2          }
 172   1      }
 173          
 174          void main()
 175          {
 176   1          uint count=0;
 177   1          char SEND_BUF[]="Heartrate:000,Temp:00.0C\r\n";
 178   1        
C51 COMPILER V9.60.7.0   USER                                                              11/20/2023 18:28:30 PAGE 4   

 179   1          lcd_init();//1602初始化
 180   1          Timer_Init();//定时器初始化
 181   1          lcd_write_str(0, 0, "  Heartrate:000 ");
 182   1          lcd_write_str(0, 1, "  Temp:00.0 C   ");
 183   1          lcd_write_char(11,1,0xdf);
 184   1          uart_init(9600);
 185   1          while(1)
 186   1          {
 187   2              keyscan();//按键扫描
 188   2              if(setn == 0)
 189   2              {
 190   3                  if(count++>=1000)
 191   3                  {
 192   4                        count=0;
 193   4                          //显示心率体温值
 194   4                      lcd_write_char(12,0,heartrate/100+'0');
 195   4                      lcd_write_char(13,0,heartrate%100/10+'0');
 196   4                      lcd_write_char(14,0,heartrate%10+'0');
 197   4                      lcd_write_char(7,1,temperature/100+'0');
 198   4                      lcd_write_char(8,1,temperature%100/10+'0');
 199   4                      lcd_write_char(10,1,temperature%10+'0');
 200   4                    
 201   4                      SEND_BUF[10]=heartrate/100+'0';
 202   4                      SEND_BUF[11]=heartrate%100/10+'0';
 203   4                      SEND_BUF[12]=heartrate%10+'0';
 204   4                      SEND_BUF[19]=temperature/100+'0';
 205   4                      SEND_BUF[20]=temperature%100/10+'0';
 206   4                      SEND_BUF[22]=temperature%10+'0';
 207   4                    
 208   4                      uart_send(SEND_BUF,26);//串口发送
 209   4                  }
 210   3                  if(((heartrate<=heartrateMin||heartrate>=heartrateMax)&&heartrate!=0)||(temperature>=temperature
             -Max))//心率温度超限报警
 211   3                  BEEP = 0;
 212   3                  else 
 213   3                  BEEP = 1;
 214   3              }
 215   2              delay_ms(1);
 216   2          }
 217   1      }  
 218          
 219          // Timer 0中断子程序，每2MS中断一次，读取AD值，计算心率值
 220          void Timer0_rountine(void) interrupt 1
 221          {                       
 222   1        int N;
 223   1        unsigned char i;
 224   1        // keep a running total of the last 10 IBI values
 225   1        unsigned int runningTotal = 0;                  // clear the runningTotal variable    
 226   1      
 227   1        //EA=0;                                      // disable interrupts while we do this
 228   1        TL0 = 0xCD;   //2ms
 229   1        TH0 = 0xF8;
 230   1        Signal = Read_ADC0832(0)<<2;              // read the Pulse Sensor 
 231   1        sampleCounter += 2;                         // keep track of the time in mS with this variable
 232   1        N = sampleCounter - lastBeatTime;       // monitor the time since the last beat to avoid noise
 233   1      
 234   1      
 235   1          //  find the peak and trough of the pulse wave
 236   1        if(Signal < thresh && N > (IBI/5)*3){       // avoid dichrotic noise by waiting 3/5 of last IBI
 237   2          if (Signal < Trough){                        // T is the trough
 238   3            Trough = Signal;                         // keep track of lowest point in pulse wave 
 239   3          }
C51 COMPILER V9.60.7.0   USER                                                              11/20/2023 18:28:30 PAGE 5   

 240   2        }
 241   1      
 242   1        if(Signal > thresh && Signal > Peak){          // thresh condition helps avoid noise
 243   2          Peak = Signal;                             // P is the peak
 244   2        }                                        // keep track of highest point in pulse wave
 245   1      
 246   1        //  NOW IT'S TIME TO LOOK FOR THE HEART BEAT
 247   1        // signal surges up in value every time there is a pulse
 248   1        if (N > 250){                                   // avoid high frequency noise
 249   2          if ( (Signal > thresh) && (Pulse == false) && (N > (IBI/5)*3) ){        
 250   3            Pulse = true;                               // set the Pulse flag when we think there is a pulse
 251   3                           // turn on pin 13 LED
 252   3            IBI = sampleCounter - lastBeatTime;         // measure time between beats in mS
 253   3            lastBeatTime = sampleCounter;               // keep track of time for next pulse
 254   3      
 255   3            if(secondBeat){                        // if this is the second beat, if secondBeat == TRUE
 256   4              secondBeat = false;                  // clear secondBeat flag
 257   4              for(i=0; i<=9; i++){             // seed the running total to get a realisitic BPM at startup
 258   5                rate[i] = IBI;                      
 259   5              }
 260   4            }
 261   3      
 262   3            if(firstBeat){                         // if it's the first time we found a beat, if firstBeat == TR
             -UE
 263   4              firstBeat = false;                   // clear firstBeat flag
 264   4              secondBeat = true;                   // set the second beat flag
 265   4              EA=1;                               // enable interrupts again
 266   4              return;                              // IBI value is unreliable so discard it
 267   4            }   
 268   3      
 269   3      
 270   3      
 271   3            for(i=0; i<=8; i++){                // shift data in the rate array
 272   4              rate[i] = rate[i+1];                  // and drop the oldest IBI value 
 273   4              runningTotal += rate[i];              // add up the 9 oldest IBI values
 274   4            }
 275   3      
 276   3            rate[9] = IBI;                          // add the latest IBI to the rate array
 277   3            runningTotal += rate[9];                // add the latest IBI to runningTotal
 278   3            runningTotal /= 10;                     // average the last 10 IBI values 
 279   3            BPM = 60000/runningTotal;               // how many beats can fit into a minute? that's BPM!
 280   3            if(BPM<=150 && BPM>=60)   //限制BPM最高显示值,最低显示值
 281   3            {
 282   4                heartrate = BPM;
 283   4            } 
 284   3            else  heartrate=0;  
 285   3            QS = true;                              // set Quantified Self flag 
 286   3            // QS FLAG IS NOT CLEARED INSIDE THIS ISR
 287   3          }                       
 288   2        }
 289   1      
 290   1        if (Signal < thresh && Pulse == true){   // when the values are going down, the beat is over
 291   2                      // turn off pin 13 LED
 292   2          Pulse = false;                         // reset the Pulse flag so we can do it again
 293   2          amp = Peak - Trough;                           // get amplitude of the pulse wave
 294   2          thresh = amp/2 + Trough;                    // set thresh at 50% of the amplitude
 295   2          Peak = thresh;                            // reset these for next time
 296   2          Trough = thresh;
 297   2        }
 298   1      
 299   1        if (N > 2500){                           // if 2.5 seconds go by without a beat
 300   2          thresh = 512;                          // set thresh default
C51 COMPILER V9.60.7.0   USER                                                              11/20/2023 18:28:30 PAGE 6   

 301   2          Peak = 512;                               // set P default
 302   2          Trough = 512;                               // set T default
 303   2          lastBeatTime = sampleCounter;          // bring the lastBeatTime up to date        
 304   2          firstBeat = true;                      // set these to avoid noise
 305   2          secondBeat = false;                    // when we get the heartbeat back
 306   2        }
 307   1      
 308   1        //EA=1;                                   // enable interrupts when youre done!
 309   1      }// end isr
 310          
 311          void Timer1_rountine(void) interrupt 3
 312          {
 313   1          static uchar count2=0;
 314   1          TL1 = 0x00;   //20ms
 315   1          TH1 = 0xB8;
 316   1          if (QS == true){
 317   2            QS = false; // reset the Quantified Self flag for next time
 318   2          }
 319   1          if(count2++>=25)//500ms读取一次温度
 320   1          {
 321   2              count2 = 0 ;
 322   2              temperature = DS18B20_TF()*10;//获取温度
 323   2          }
 324   1      }
 325          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2345    ----
   CONSTANT SIZE    =    129    ----
   XDATA SIZE       =      6    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     53      41
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      6    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
